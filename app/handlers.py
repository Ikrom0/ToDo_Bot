import re

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import app.keyboards as kb
from app.utils import update_task_list, show_tasks, update_scheduled_jobs
from app.db import (find_user_db, create_user_db, clear_tasks_db, 
                    add_reminder_and_task_db, delete_task_db)

# –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '00:00'
time_pattern = re.compile(r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$')

router = Router()
class TaskState(StatesGroup):
    waiting_to_add_task = State()
    waiting_to_add_time = State()
    waiting_to_add_time_input = State()
    waiting_to_add_priority = State()
    waiting_to_delete_task = State()
    waiting_for_confirmation = State()


#–°—Ç–∞—Ä—Ç
@router.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    greeting = r'''<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</b>,
<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</i>'''

    user_existence = await find_user_db(user_id)

    #–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    if user_existence is None:
        await create_user_db(user_id, user_name)

    await message.answer(text=greeting, parse_mode='HTML', reply_markup=kb.task_list)


#–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
@router.message(Command('back'))
async def cancel_action(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ‚ùå",reply_markup=kb.task_list)
    

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
@router.message(F.text == '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á üìã')
async def handle_show_tasks(message: Message):
    user_id = message.from_user.id

    #–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    await show_tasks(user_id, message)


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏
@router.callback_query(F.data == 'clear_task')
async def handle_clear_task(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—á–∏—Å—Ç–∫—ÉüîÑ', reply_markup=kb.clear_confirmation)
    await state.set_state(TaskState.waiting_for_confirmation)


#–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏
@router.callback_query(F.data == 'confirm_cleanup', TaskState.waiting_for_confirmation)
async def confirm_delete_task(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    #–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    await clear_tasks_db(user_id)

    #–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—á–∏—Å—Ç–∫–∏
    await callback.message.answer(text=r"<b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç</b>",parse_mode='HTML', reply_markup=kb.task_setting)
    await callback.answer(text='–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω')
    await state.clear()


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—á–∏—Å—Ç–∫–∏
@router.callback_query(F.data == 'cancel_cleanup')
async def cancel_delete_task(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.',reply_markup=kb.task_list)
    await state.clear()


#–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@router.callback_query(F.data == 'delete_task')
async def handle_deleting_task(callback: CallbackQuery, state: FSMContext):

    #–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.set_state(TaskState.waiting_to_delete_task)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è')


@router.message(TaskState.waiting_to_delete_task)
async def process_delete(message:Message, state: FSMContext):
    user_id = message.from_user.id

    try:
        #–ë–µ—Ä–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
        user_number = int(message.text)
        data = await update_task_list(user_id)
        
        try:
            to_delete = data[user_number]
        except KeyError:
            await message.answer(text='‚ö†Ô∏è*–û—à–∏–±–∫–∞:*\n\\-–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\\.',parse_mode='MarkdownV2')
            return
    except ValueError:
        await message.answer(text='‚ö†Ô∏è*–û—à–∏–±–∫–∞:*\n\\-–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º\\.',
    parse_mode='MarkdownV2')
        return

    #–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await delete_task_db(to_delete)
    await message.answer(text='–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞‚úÖ', reply_markup=kb.task_list)
    await state.clear()


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@router.callback_query(F.data == 'add_task')
async def handle_add_task(callback: CallbackQuery, state: FSMContext):

    #–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await callback.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    await state.set_state(TaskState.waiting_to_add_task)


@router.message(TaskState.waiting_to_add_task)
async def process_add_task(message: Message, state: FSMContext):
    user_text = message.text

    if len(user_text) < 25:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ state
        await state.update_data(user_text=user_text)
        await message.reply(text='<b>–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?‚è∞</b>',parse_mode='HTML',reply_markup=kb.task_reminder)
        await state.set_state(TaskState.waiting_to_add_time)
    else:
        await message.answer(text="‚ö†Ô∏è*–û—à–∏–±–∫–∞:*\n\\-–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–ª–∏–Ω—É –∑–∞–¥–∞—á–∏ –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤\\.", parse_mode="MarkdownV2")
        return


@router.callback_query(F.data == 'no_reminder', TaskState.waiting_to_add_time)
async def handle_no_reminder(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    user_task = data.get('user_text')

    await add_reminder_and_task_db(user_id, user_task)
    await update_task_list(user_id)
    await callback.message.answer(text='–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞‚úÖ')
    await state.clear()

@router.callback_query(F.data == 'yes_reminder', TaskState.waiting_to_add_time)
async def handle_yes_reminder(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TaskState.waiting_to_add_time_input)
    await callback.message.answer(text='‚è≥–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n<b>–í —Ñ–æ—Ä–º–∞—Ç–µ: 00:00</b>',parse_mode='HTML')


@router.message(TaskState.waiting_to_add_time_input)
async def add_reminder_and_task(message: Message, state: FSMContext): 
    user_id = message.from_user.id
    data = await state.get_data()
    user_text = data.get('user_text')
    user_time = message.text
        
    #–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞
    if time_pattern.match(user_time):
        await add_reminder_and_task_db(user_id, user_text, user_time)
        await update_task_list(user_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        from run import bot
        await update_scheduled_jobs(bot,send_notification)

        await message.answer(text='–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞‚úÖ')
        await state.clear()
    else:
        await message.answer(text='‚ö†Ô∏è*–û—à–∏–±–∫–∞:*\n\\-–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 00:00\\.', parse_mode='MarkdownV2')
        

#–£–≤–µ–¥–æ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –µ–≥–æ –∑–∞–¥–∞—á–µ
async def send_notification(bot, user_id, task, reminder_time):
    await bot.send_message(user_id, text=f'‚ùó–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n<b>{task} ‚Äî {reminder_time}</b>', parse_mode='HTML')


#–í—Å–ª—É—á–∞–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
@router.message()
async def unknown_text(message: Message):
    await message.answer("‚ö†Ô∏è–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")

